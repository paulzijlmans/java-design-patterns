Singleton

Concepts
- Only one instance created
- Guarantees control of a resource
- Lazily loaded

Design
- Class is responsible for lifecycle
- Static in nature
- Needs to be thread safe
- Private instance
- Private constructor
- No parameters required for construction

Pitfalls
- Often overused
- Difficult to unit test
- If not careful, not thread-safe
- Sometimes confused for Factory
- java.util.Calendar is NOT a Singleton
    - Prototype

Summary
- Guarantee one instance
- Easy to implement
- Solves a well defined problem
- Don't abuse it
